# syntax=docker/dockerfile:1
# hmpc containerfile

# indicates what packages to install in the container image
# packages_for=default (default packages for building)
# packages_for=mpspdz (more packages to also build MP-SPDZ)
ARG packages_for=mpspdz

# base container image
# intel/oneapi-runtime:2025.0.2-0-devel-ubuntu24.04
FROM intel/oneapi-runtime@sha256:a45035d3db1a60f8811bcc4fbfe2e08edc92fe01464c1f314eeff1f352f44c12 AS base-ubuntu
ARG cuda_version
ENV CUDA_VERSION=$cuda_version
ARG cuda_path=/opt/cuda-${cuda_version:?}
ENV CUDA_PATH=$cuda_path
ENV CUDA_HOME=$CUDA_PATH
ENV CUDA_ROOT=$CUDA_PATH
ENV CUDA_BIN_DIR=$CUDA_PATH/bin
ENV CUDA_INC_DIR=$CUDA_PATH/include
ENV CUDA_INCLUDE_DIR=$CUDA_PATH/include
ENV CUDA_DOC_DIR=$CUDA_PATH/doc
ENV CUDA_LIB_DIR=$CUDA_PATH/lib64
ENV CUDA_LIB_PATH=$CUDA_PATH/lib64/stubs
ENV CUDA_LIBRARY_DIR=$CUDA_PATH/lib64
ENV CUDA_PKGCONFIG_DIR=$CUDA_PATH/pkgconfig
ENV CUDA_MAN_DIR=$CUDA_PATH/doc/man

# container image to build LLVM/dpcpp from source
FROM base-ubuntu AS dpcpp-builder
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get install -y --no-install-recommends \
    git \
    build-essential cmake ninja-build \
    python3-pip \
 && rm -rf /var/lib/apt/lists/*
WORKDIR /workspaces/dpcpp
ARG configure_env=""
ARG configure_features="--cuda --native_cpu --llvm-external-projects=clang-tools-extra,compiler-rt,openmp --cmake-opt='-DCUDA_TOOLKIT_ROOT_DIR=$CUDA_ROOT'"
ARG compile_flags=""
ENV CONFIGURE_ENV=${configure_env}
ENV CONFIGURE_FEATURES=${configure_features}
ENV COMPILE_FLAGS=${compile_flags}
RUN --mount=type=bind,from=cuda,target=$CUDA_PATH \
    git clone https://github.com/intel/llvm --branch nightly-2025-01-02 --depth=1 \
 && env $CONFIGURE_ENV python3 /workspaces/dpcpp/llvm/buildbot/configure.py $CONFIGURE_FEATURES \
 && python3 /workspaces/dpcpp/llvm/buildbot/compile.py $COMPILE_FLAGS \
 && python3 /workspaces/dpcpp/llvm/buildbot/compile.py --build-target=clang-tidy $COMPILE_FLAGS \
 && python3 /workspaces/dpcpp/llvm/buildbot/compile.py --build-target=omp $COMPILE_FLAGS \
 && python3 /workspaces/dpcpp/llvm/buildbot/compile.py --build-target=install $COMPILE_FLAGS

# base development container image
FROM base-ubuntu AS dev-base
ARG user_id=1000
ARG group_id=1000
ENV CMAKE_ROOT=/opt/cmake
ENV LLVM_ROOT=/opt/dpcpp
ENV VCPKG_ROOT=/workspaces/vcpkg
ENV VCPKG_DISABLE_METRICS=1
ENV PATH=$LLVM_ROOT/bin:$CMAKE_ROOT/bin:/home/hmpc-dev/.cargo/bin:$PATH
ENV LD_LIBRARY_PATH=$LLVM_ROOT/lib/x86_64-unknown-linux-gnu:$LLVM_ROOT/lib:$CUDA_LIB_PATH:$CUDA_ROOT/extras/CUPTI/lib64:$LD_LIBRARY_PATH
ENV CPATH=$LLVM_ROOT/include:$LLVM_ROOT/include/sycl:$CPATH
COPY --from=dpcpp-builder /workspaces/dpcpp/llvm/build/install/ $LLVM_ROOT
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get install -y --no-install-recommends \
    curl zip unzip tar git \
    build-essential g++-14 ninja-build \
    python3-pip python3-venv \
    iproute2 iputils-ping \
    && rm -rf /var/lib/apt/lists/* \
 && ( \
    groupadd -g ${group_id:?} hmpc-dev \
    || \
    groupmod -g ${group_id:?} --new-name hmpc-dev $(id -gn ${group_id:?}) \
    ) \
 && ( \
    useradd --create-home --home-dir /home/hmpc-dev -u ${user_id:?} -g ${group_id:?} --shell /bin/bash hmpc-dev \
    || \
    usermod --move-home --home /home/hmpc-dev -u ${user_id:?} -g ${group_id:?} --shell /bin/bash --login hmpc-dev $(id -un ${user_id:?}) \
    ) \
 && mkdir -p $CMAKE_ROOT \
 && cd $CMAKE_ROOT \
 && curl -sSfLO https://github.com/Kitware/CMake/releases/download/v3.31.5/cmake-3.31.5-linux-x86_64.sh \
 && sh ./cmake-3.31.5-linux-x86_64.sh --skip-license --prefix=/opt/cmake \
 && rm ./cmake-3.31.5-linux-x86_64.sh
USER hmpc-dev
WORKDIR /workspaces

# default development container image
FROM dev-base AS dev-default
# Recommended way to install Rust: https://www.rust-lang.org/tools/install
RUN --mount=type=bind,source=requirements.txt,target=/home/hmpc-dev/requirements.txt \
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
 && rustup toolchain install nightly \
 && cargo install \
    cbindgen@0.28.0 \
 && cd /workspaces \
 && git clone https://github.com/microsoft/vcpkg --depth=1 \
 && $VCPKG_ROOT/bootstrap-vcpkg.sh -disableMetrics \
 && python3 -m venv /home/hmpc-dev/venv \
 && . /home/hmpc-dev/venv/bin/activate \
 && pip3 install -r $HOME/requirements.txt --no-warn-script-location
ENV VIRTUAL_ENV=/home/hmpc-dev/venv
ENV PATH=$VIRTUAL_ENV/bin:$PATH
WORKDIR /workspaces/hmpc

# development container image with extra packages for MP-SPDZ
FROM dev-default AS dev-mpspdz
USER root
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get install -y --no-install-recommends \
    libboost-dev libboost-filesystem-dev libboost-thread-dev \
    libgmp-dev \
    libntl-dev \
    libsodium-dev \
    libssl-dev \
 && rm -rf /var/lib/apt/lists/*
USER hmpc-dev

# container image to build hmpc
FROM dev-default AS hmpc-builder
COPY --chown=hmpc-dev:hmpc-dev . /workspaces/hmpc
ARG cuda_arch=sm_70
ENV CUDA_ARCH=${cuda_arch}
RUN --mount=type=bind,from=cuda,target=$CUDA_PATH \
    cmake --preset cuda -B /home/hmpc-dev/build -DHMPC_CUDA_ARCH=$CUDA_ARCH -DHMPC_BUILD_TESTING=OFF -DHMPC_BUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=/home/hmpc-dev/install \
 && cmake --build /home/hmpc-dev/build --config Release --target install

# hmpc container image (to use hmpc as a dependency)
FROM dev-base AS development
COPY --from=hmpc-builder /home/hmpc-dev/install /usr/local

# hmpc-dev container image (to develop hmpc)
FROM dev-${packages_for} AS library-development
