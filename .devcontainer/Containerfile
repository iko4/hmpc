ARG build=mpspdz
# build=default or build=mpspdz

FROM intel/oneapi-runtime@sha256:fc18ca92700a9020547edb9a279458d575cbe0841479605e73b69b3a80433f7d AS base-ubuntu

FROM base-ubuntu AS dpcpp-builder
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get install -y --no-install-recommends \
    git \
    build-essential cmake ninja-build \
    python3-pip \
 && rm -rf /var/lib/apt/lists/*
WORKDIR /workspaces/dpcpp
ARG configure_env=""
ARG configure_features="--native_cpu --llvm-external-projects=clang-tools-extra,compiler-rt,openmp"
ARG compile_parallelism=""
ENV CONFIGURE_ENV=${configure_env}
ENV CONFIGURE_FEATURES=${configure_features}
ENV COMPILE_PARALLELISM=${compile_parallelism}
RUN git clone https://github.com/intel/llvm --branch nightly-2024-03-04 --depth=1 \
 && env ${CONFIGURE_ENV} python3 /workspaces/dpcpp/llvm/buildbot/configure.py ${CONFIGURE_FEATURES} \
 && python3 /workspaces/dpcpp/llvm/buildbot/compile.py ${COMPILE_PARALLELISM} \
 && python3 /workspaces/dpcpp/llvm/buildbot/compile.py --build-target=clang-tidy ${COMPILE_PARALLELISM} \
 && python3 /workspaces/dpcpp/llvm/buildbot/compile.py --build-target=omp ${COMPILE_PARALLELISM} \
 && python3 /workspaces/dpcpp/llvm/buildbot/compile.py --build-target=install ${COMPILE_PARALLELISM}

FROM base-ubuntu AS dev-default
ARG user_id=1000
ARG group_id=1000
ENV CMAKE_ROOT=/opt/cmake
ENV LLVM_ROOT=/opt/dpcpp
ENV VCPKG_ROOT=/workspaces/vcpkg
ENV VCPKG_DISABLE_METRICS=1
ENV PATH=$LLVM_ROOT/bin:$CMAKE_ROOT/bin:/home/vscode/.cargo/bin:$PATH
ENV LD_LIBRARY_PATH=$LLVM_ROOT/lib:$LD_LIBRARY_PATH
ENV CPATH=$LLVM_ROOT/include:$LLVM_ROOT/include/sycl:$CPATH
COPY --from=dpcpp-builder /workspaces/dpcpp/llvm/build/install/ $LLVM_ROOT
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get install -y --no-install-recommends \
    curl zip unzip tar git \
    build-essential ninja-build \
    python3-pip \
    iproute2 iputils-ping \
    && rm -rf /var/lib/apt/lists/* \
 && groupadd -g ${group_id:?} --non-unique vscode \
 && useradd --create-home -u ${user_id:?} -g ${group_id:?} --shell /bin/bash vscode \
 && mkdir -p $CMAKE_ROOT \
 && cd $CMAKE_ROOT \
 && curl -sSfLO https://github.com/Kitware/CMake/releases/download/v3.29.2/cmake-3.29.2-linux-x86_64.sh \
 && sh ./cmake-3.29.2-linux-x86_64.sh --skip-license --prefix=/opt/cmake \
 && rm ./cmake-3.29.2-linux-x86_64.sh
USER vscode
WORKDIR /workspaces
COPY --chown=vscode requirements.txt /home/vscode/requirements.txt
# Recommended way to install Rust: https://www.rust-lang.org/tools/install
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
 && rustup toolchain install nightly \
 && cargo install \
    cbindgen@0.26.0 \
 && cd /workspaces \
 && git clone https://github.com/microsoft/vcpkg --depth=1 \
 && $VCPKG_ROOT/bootstrap-vcpkg.sh -disableMetrics \
 && pip3 install -r $HOME/requirements.txt --no-warn-script-location && rm $HOME/requirements.txt
WORKDIR /workspaces/hmpc

FROM dev-default AS dev-mpspz
USER root
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get install -y --no-install-recommends \
    libboost-dev libboost-thread-dev \
    libgmp-dev \
    libntl-dev \
    libsodium-dev \
    libssl-dev \
 && rm -rf /var/lib/apt/lists/*
USER vscode
