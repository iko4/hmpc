#include "catch_helpers.hpp"

#include <hmpc/crypto/cipher.hpp>


// Test case from [RFC 8439](https://www.rfc-editor.org/rfc/rfc8439)

TEST_CASE("Chacha 20 encryption", "[crypto][cipher]")
{
    // Section 2.4.2 from RFC 8439
    hmpc::core::uint32 const key[] = {0x0302'0100, 0x0706'0504, 0x0b0a'0908, 0x0f0e'0d0c, 0x1312'1110, 0x1716'1514, 0x1b1a'1918, 0x1f1e'1d1c};
    hmpc::core::uint32 const nonce[] = {0x0000'0000, 0x4a00'0000, 0x0000'0000};
    hmpc::core::uint32 const counter[] = {0x1};

    hmpc::core::uint8 const plaintext_bytes[] =
    {
        0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c,
        0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73,
        0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39, 0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63,
        0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f,
        0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20,
        0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73,
        0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69,
        0x74, 0x2e,
    };

    hmpc::core::uint8 const expected_ciphertext_bytes[] =
    {
        0x6e, 0x2e, 0x35, 0x9a, 0x25, 0x68, 0xf9, 0x80, 0x41, 0xba, 0x07, 0x28, 0xdd, 0x0d, 0x69, 0x81,
        0xe9, 0x7e, 0x7a, 0xec, 0x1d, 0x43, 0x60, 0xc2, 0x0a, 0x27, 0xaf, 0xcc, 0xfd, 0x9f, 0xae, 0x0b,
        0xf9, 0x1b, 0x65, 0xc5, 0x52, 0x47, 0x33, 0xab, 0x8f, 0x59, 0x3d, 0xab, 0xcd, 0x62, 0xb3, 0x57,
        0x16, 0x39, 0xd6, 0x24, 0xe6, 0x51, 0x52, 0xab, 0x8f, 0x53, 0x0c, 0x35, 0x9f, 0x08, 0x61, 0xd8,
        0x07, 0xca, 0x0d, 0xbf, 0x50, 0x0d, 0x6a, 0x61, 0x56, 0xa3, 0x8e, 0x08, 0x8a, 0x22, 0xb6, 0x5e,
        0x52, 0xbc, 0x51, 0x4d, 0x16, 0xcc, 0xf8, 0x06, 0x81, 0x8c, 0xe9, 0x1a, 0xb7, 0x79, 0x37, 0x36,
        0x5a, 0xf9, 0x0b, 0xbf, 0x74, 0xa3, 0x5b, 0xe6, 0xb4, 0x0b, 0x8e, 0xed, 0xf2, 0x78, 0x5e, 0x42,
        0x87, 0x4d,
    };

    REQUIRE(std::size(plaintext_bytes) == 114);
    REQUIRE(std::size(expected_ciphertext_bytes) == 114);

    hmpc::crypto::cipher chacha({key, nonce, counter});

    hmpc::core::uint8 ciphertext_bytes[114] = {};

    chacha.enc(
        hmpc::core::limb_span<114, hmpc::core::uint8, hmpc::access::write_tag>{ciphertext_bytes},
        hmpc::core::limb_span<114, hmpc::core::uint8, hmpc::access::read_tag>{plaintext_bytes}
    );

    for (hmpc::size i = 0; i < 114; ++i)
    {
        CHECK(ciphertext_bytes[i] == expected_ciphertext_bytes[i]);
    }

    SECTION("Expected params")
    {
        auto param = chacha.generator.engine.param();

        REQUIRE(decltype(chacha)::key_size == 8);
        REQUIRE(decltype(chacha)::nonce_size == 3);
        REQUIRE(decltype(chacha)::counter_size == 1);

        hmpc::iter::for_range<hmpc::size{8}>([&](auto i)
        {
            REQUIRE(param.key[i] == key[i]);
        });
        REQUIRE(param.counter[hmpc::constants::zero] == counter[0] + 2);
        hmpc::iter::for_range<hmpc::size{3}>([&](auto i)
        {
            REQUIRE(param.nonce[i] == nonce[i]);
        });
    }

    SECTION("Decryption")
    {
        chacha.param({key, nonce, counter});

        hmpc::core::uint8 decrypted_bytes[114] = {};

        chacha.dec(
            hmpc::core::limb_span<114, hmpc::core::uint8, hmpc::access::write_tag>{decrypted_bytes},
            hmpc::core::limb_span<114, hmpc::core::uint8, hmpc::access::read_tag>{ciphertext_bytes}
        );

        for (hmpc::size i = 0; i < 114; ++i)
        {
            CHECK(decrypted_bytes[i] == plaintext_bytes[i]);
        }
    }
}
